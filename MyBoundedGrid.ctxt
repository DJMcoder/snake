#BlueJ class context
comment0.params=rows\ cols
comment0.target=MyBoundedGrid(int,\ int)
comment0.text=\n\ Constructor\ for\ the\ class\ MyBoundedGrid\n\ \n\ @param\ \ \ rows\ \ \ \ row\ number\ of\ the\ array.\n\ @param\ \ \ cols\ \ \ \ col\ number\ of\ the\ array.\n
comment1.params=
comment1.target=int\ getNumRows()
comment1.text=\n\ returns\ the\ number\ rows\ in\ the\ array.\n\ \n\ @return\ \ the\ number\ of\ rows\n
comment10.params=start
comment10.target=java.util.ArrayList\ getValidAdjacentLocations(Location)
comment10.text=\n\ Returns\ an\ ArrayList\ of\ valid,\ adjacent\ locations\ to\ a\ start\ point.\ \n\ \n\ @param\ start\ \ \ \ \ the\ start\ point\n\ \n\ @return\ \ an\ ArrayList\ of\ valid,\ adjacent\ locations\ to\ a\ start\ point\n
comment11.params=start
comment11.target=java.util.ArrayList\ getValidEmptyAdjacentLocations(Location)
comment11.text=\n\ Returns\ an\ ArrayList\ of\ valid,\ empty,\ adjacent\ locations\ to\ a\ start\ point.\ \n\ \n\ @param\ start\ \ \ \ \ the\ start\ point\n\ \n\ @return\ \ an\ ArrayList\ of\ valid,\ empty,\ adjacent\ locations\ to\ a\ start\ point\n
comment12.params=array\ origin
comment12.target=boolean\ areAllAdjacentsZero(int[][],\ Location)
comment12.text=\n\ Helper\ to\ makeNumberGrid().\ Checks\ to\ see\ if\ the\ numbers\ around\ the\ origin\ are\ all\ 0.\n
comment13.params=array\ check
comment13.target=java.util.ArrayList\ locationsOfInts(int[][],\ int)
comment13.text=\n\ Helper\ to\ makeNumberGrid().\ Returns\ the\ locations\ on\ an\ int[][]\ of\ certain\ ints.\ \n
comment2.params=
comment2.target=int\ getNumCols()
comment2.text=\n\ returns\ the\ number\ columns\ in\ the\ array.\n\ \n\ @return\ the\ number\ of\ columns\n
comment3.params=loc
comment3.target=boolean\ isValid(Location)
comment3.text=\n\ Determines\ whether\ a\ location\ is\ valid.\n\ \n\ @param\ \ \ loc\ the\ location\ in\ question\n\ @return\ \ true\ if\ valid,\ otherwise;\n\ \ \ \ \ \ \ \ \ \ false.\n
comment4.params=loc
comment4.target=java.lang.Object\ get(Location)
comment4.text=\n\ Returns\ the\ object\ at\ location\ loc.\n\ \n\ @param\ \ \ loc\ location\ of\ the\ object.\n\ @return\ \ the\ object\ at\ location\ loc.\n
comment5.params=loc\ obj
comment5.target=java.lang.Object\ put(Location,\ java.lang.Object)
comment5.text=\n\ Puts\ e\ object\ in\ the\ location\ loc.\n\ \n\ @param\ \ \ loc\ new\ location\ of\ the\ object.\n\ @param\ \ \ obj\ object\ to\ be\ placed\ in\ the\ location.\n\ @return\ \ the\ object\ that\ was\ at\ location\ loc.\n
comment6.params=loc
comment6.target=java.lang.Object\ remove(Location)
comment6.text=\n\ Removes\ object\ at\ location\ loc.\n\ \n\ @param\ \ \ loc\ location\ where\ the\ object\ was\ removed\ from.\n\ @return\ \ the\ object\ removed\ from\ location\ loc.\n
comment7.params=
comment7.target=java.util.ArrayList\ getOccupiedLocations()
comment7.text=\n\ Gets\ the\ location\ that\ are\ occupied.\n\ \n\ @return\ \ returns\ the\ locations\ that\ are\ occupied.\n
comment8.params=
comment8.target=java.util.ArrayList\ getUnoccupiedLocations()
comment8.text=\n\ Gets\ the\ location\ that\ are\ unoccupied.\n\ \n\ @return\ \ returns\ the\ locations\ that\ are\ unoccupied.\n
comment9.params=origin\ target
comment9.target=int[][]\ makeNumberGrid(Location,\ Location)
comment9.text=\n\ Starting\ at\ target,\ the\ target,\ the\ method\ spreads\ outward\ labeling\ at\ each\ point\ the\n\ mininum\ number\ of\ steps\ to\ get\ to\ that\ Location.\ It\ stops\ when\ it\ reaches\ the\ origin.\ \n\ \n\ @param\ target\ \ \ \ usually\ the\ foodstuff\n\ @param\ origin\ \ \ \ usually\ the\ head\n
numComments=14
